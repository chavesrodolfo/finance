// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  stackUserId  String        @unique
  email        String        @unique
  name         String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  // Relations
  transactions       Transaction[]
  categories         Category[]
  budgets            Budget[]
  descriptions       Description[]
  investmentAccounts InvestmentAccount[]
  
  // Subaccount relations
  sentInvitations     SubaccountInvitation[] @relation("InviterUser")
  receivedInvitations SubaccountInvitation[] @relation("InviteeUser") 
  ownedAccounts       SubaccountAccess[]     @relation("AccountOwner")
  accessibleAccounts  SubaccountAccess[]     @relation("SubaccountUser")
  
  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?  @default("#6b7280")
  icon        String?  @default("Tag")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  
  @@unique([name, userId])
  @@map("categories")
}

model Transaction {
  id          String            @id @default(cuid())
  amount      Float
  description String
  notes       String?
  date        DateTime
  type        TransactionType
  userId      String
  categoryId  String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])
  
  @@map("transactions")
}

model Budget {
  id        String   @id @default(cuid())
  name      String
  amount    Float
  period    Period   @default(MONTHLY)
  startDate DateTime
  endDate   DateTime?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("budgets")
}

model Description {
  id          String   @id @default(cuid())
  name        String
  icon        String?  @default("Tag")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([name, userId])
  @@map("descriptions")
}

model InvestmentAccount {
  id                   String   @id @default(cuid())
  name                 String
  accountType          String
  currentValue         Float
  currency             String   @default("CAD")
  monthlyReturnPercent Float    @default(0)
  annualReturnPercent  Float    @default(0)
  userId               String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("investment_accounts")
}

enum TransactionType {
  EXPENSE
  INCOME
  EXPENSE_SAVINGS
  RETURN
}

enum Period {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

model SubaccountInvitation {
  id           String                   @id @default(cuid())
  inviterEmail String                   // Email of the account owner
  inviteeEmail String                   // Email being invited
  status       SubaccountInvitationStatus @default(PENDING)
  inviterId    String?                  // Will be set once inviter is found
  inviteeId    String?                  // Will be set once invitee registers/is found
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  
  // Relations
  inviter User? @relation("InviterUser", fields: [inviterId], references: [id], onDelete: Cascade)
  invitee User? @relation("InviteeUser", fields: [inviteeId], references: [id], onDelete: Cascade)
  
  @@unique([inviterEmail, inviteeEmail])
  @@map("subaccount_invitations")
}

model SubaccountAccess {
  id           String   @id @default(cuid())
  ownerId      String   // Account owner
  subaccountId String   // User with access
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  owner      User @relation("AccountOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  subaccount User @relation("SubaccountUser", fields: [subaccountId], references: [id], onDelete: Cascade)
  
  @@unique([ownerId, subaccountId])
  @@map("subaccount_access")
}

enum SubaccountInvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}
